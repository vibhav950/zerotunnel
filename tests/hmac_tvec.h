#pragma once

#include "crypto/hmac_defs.h"

/** Independently constructed test vectors; change at your own risk */

/* 256-bit keys */
static const uint8_t key_256[32] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
    0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
    0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};

/* 384-bit keys */
static const uint8_t key_384[48] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23,
    0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f};

/* 512-bit keys */
static const uint8_t key_512[64] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
    0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
    0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
    0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
    0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
    0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f};

#define HMAC_256_TVEC_DATA_1_LEN 31 /* Smaller than block size */
#define HMAC_256_TVEC_DATA_2_LEN 32 /* Equal to block size */
#define HMAC_256_TVEC_DATA_3_LEN 33 /* Larger than block size */
/* Test vector data for 256-bit block size */
static const uint8_t data_256[HMAC_256_TVEC_DATA_3_LEN] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
    0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
    0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20};

#define HMAC_384_TVEC_DATA_1_LEN 47
#define HMAC_384_TVEC_DATA_2_LEN 48
#define HMAC_384_TVEC_DATA_3_LEN 49
/* Test vector data for 384-bit block size */
static const uint8_t data_384[HMAC_384_TVEC_DATA_3_LEN] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
    0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13,
    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
    0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30};

#define HMAC_512_TVEC_DATA_1_LEN 63
#define HMAC_512_TVEC_DATA_2_LEN 64
#define HMAC_512_TVEC_DATA_3_LEN 65
/* Test vector data for 512-bit block size */
static const uint8_t data_512[HMAC_512_TVEC_DATA_3_LEN] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
    0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
    0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
    0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b,
    0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
    0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40};

/* Expected HMACs for SHA-256 */
static const uint8_t sha256_hmacs[][HMAC_SHA256_MAX_OUT_LEN] = {
    {0x3d, 0xf5, 0xad, 0xf2, 0xa3, 0x3c, 0x95, 0x9e, 0x4f, 0x31, 0xda,
     0xa7, 0x17, 0x7c, 0x48, 0x7f, 0x82, 0x73, 0xf2, 0x26, 0x55, 0x03,
     0x3c, 0x58, 0xd3, 0x43, 0xbe, 0x69, 0x21, 0xfe, 0xa4, 0xed},
    {0xe8, 0x49, 0x9b, 0xe4, 0xf1, 0x98, 0x0d, 0x68, 0xf1, 0x32, 0x22,
     0xa4, 0x18, 0xdf, 0x5c, 0xbd, 0x97, 0xd5, 0x3f, 0xdd, 0xf5, 0x90,
     0xc2, 0x10, 0x8e, 0x22, 0xd4, 0x00, 0x05, 0xb7, 0x07, 0x13},
    {0x02, 0x76, 0x51, 0x54, 0x82, 0x33, 0x98, 0x75, 0x4e, 0xf0, 0x90,
     0x9c, 0xec, 0x95, 0x78, 0xbd, 0xee, 0xfa, 0xdc, 0x3c, 0xe2, 0xbe,
     0x43, 0xf3, 0x8c, 0x1e, 0x16, 0xe2, 0xa5, 0xc9, 0xb6, 0xfe}};

/* Expected HMACs for SHA-384 */
static const uint8_t sha384_hmacs[][HMAC_SHA384_MAX_OUT_LEN] = {
    {0xfe, 0xc3, 0x71, 0x32, 0x00, 0x0c, 0x27, 0x75, 0xbb, 0x8b, 0xec, 0x93,
     0xe2, 0x1a, 0x7e, 0x87, 0xe2, 0x66, 0x23, 0xe5, 0x3e, 0x76, 0x8b, 0x73,
     0xed, 0x83, 0x9d, 0xe7, 0x7d, 0x0f, 0x06, 0xcd, 0x91, 0x72, 0x9b, 0x38,
     0xaa, 0x28, 0xe2, 0x59, 0xd7, 0x60, 0xe7, 0xc1, 0xda, 0x15, 0x7a, 0x07},
    {0xcc, 0xcb, 0x68, 0x78, 0x5c, 0x85, 0x92, 0x86, 0xa3, 0x95, 0xa8, 0xc6,
     0xef, 0x40, 0x55, 0x77, 0x18, 0xf6, 0x7c, 0xd9, 0x16, 0x03, 0x0a, 0xf5,
     0xfe, 0x8c, 0xa6, 0x24, 0xd9, 0xe5, 0xf7, 0x36, 0xd4, 0xf5, 0xc9, 0x7f,
     0xea, 0x62, 0xb0, 0x2a, 0xaa, 0xc1, 0xa2, 0xe9, 0x02, 0x06, 0xb3, 0x1d},
    {0x06, 0x2f, 0xf6, 0xc1, 0x6a, 0x93, 0x0b, 0x08, 0xda, 0x30, 0xf1, 0x6d,
     0x1d, 0xeb, 0x98, 0xa1, 0xe3, 0x5f, 0x71, 0xdc, 0x0a, 0x40, 0xbd, 0x25,
     0xc9, 0xfb, 0x19, 0xbb, 0x60, 0x39, 0x65, 0x52, 0x3a, 0xec, 0x10, 0x6a,
     0xf0, 0x13, 0xf0, 0x45, 0x63, 0x5f, 0xfa, 0x77, 0x3c, 0x31, 0x34, 0x73}};

/* Expected HMACs for SHA-512 */
static const uint8_t sha512_hmacs[][HMAC_SHA512_MAX_OUT_LEN] = {
    {0xca, 0x68, 0xbb, 0xb0, 0xe2, 0x16, 0x34, 0x01, 0x70, 0xcb, 0xc8,
     0x18, 0x52, 0xdc, 0x3b, 0xd4, 0x74, 0x22, 0xf4, 0x20, 0xfb, 0xfc,
     0x1d, 0x37, 0x76, 0xc6, 0x13, 0xf7, 0xe3, 0xbf, 0x4d, 0x9a, 0xe4,
     0xd7, 0x01, 0x5c, 0x7c, 0xc2, 0x82, 0x23, 0xd0, 0x42, 0x44, 0x04,
     0x55, 0x9e, 0xec, 0x52, 0x33, 0x55, 0x44, 0x9f, 0x62, 0x26, 0x35,
     0x33, 0x1e, 0xfe, 0x9f, 0x79, 0x9c, 0xab, 0x3b, 0x4e},
    {0x20, 0x61, 0xef, 0xdd, 0x80, 0x90, 0x7b, 0x17, 0x66, 0xd8, 0xa6,
     0x4a, 0x2f, 0x1d, 0x5d, 0xfa, 0x1a, 0xc2, 0x5a, 0x87, 0xf7, 0xf2,
     0x7c, 0xde, 0xf6, 0x80, 0x8a, 0x27, 0xf1, 0xaf, 0x37, 0xf5, 0x7f,
     0xd6, 0xb2, 0x9c, 0x3e, 0xf9, 0x5f, 0xa2, 0xf8, 0xc2, 0x2f, 0x52,
     0x68, 0x60, 0x43, 0xda, 0x17, 0xd1, 0x96, 0x38, 0xbd, 0xaa, 0xe8,
     0x50, 0x81, 0x27, 0x82, 0xb7, 0xc8, 0x0b, 0xe6, 0x88},
    {0xc5, 0xde, 0xf3, 0x35, 0x15, 0x08, 0xcc, 0x62, 0x21, 0x55, 0xac,
     0x16, 0x75, 0xd1, 0x0e, 0x09, 0x67, 0x98, 0x1b, 0x8f, 0x8a, 0x19,
     0xa9, 0x59, 0xfa, 0xbc, 0x3e, 0xe9, 0x84, 0xad, 0x2a, 0x56, 0x76,
     0xc1, 0xf7, 0x47, 0xa4, 0x71, 0x85, 0x7f, 0xa5, 0x03, 0xf9, 0x8a,
     0x88, 0x16, 0x51, 0x2f, 0x57, 0xfe, 0xb9, 0xcf, 0xaf, 0x1b, 0x63,
     0x24, 0xdd, 0x9e, 0x08, 0x87, 0xa5, 0x3c, 0x5a, 0xeb}};

/* Expected HMACs for SHA3-256 */
static const uint8_t sha3_256_hmacs[][HMAC_SHA3_256_MAX_OUT_LEN] = {
    {0x0a, 0x29, 0x24, 0x75, 0x5e, 0x59, 0x60, 0x7f, 0x9f, 0xb0, 0x33,
     0x9c, 0x4e, 0xc5, 0x02, 0x0d, 0x06, 0x9e, 0xd7, 0xcb, 0xb8, 0x6f,
     0x36, 0x98, 0xb6, 0xb0, 0x8f, 0xb8, 0x41, 0xfe, 0xe6, 0x22},
    {0xcb, 0xe1, 0xec, 0x9b, 0xa3, 0x0a, 0x78, 0xce, 0x92, 0xb8, 0x98,
     0x9b, 0xec, 0xae, 0x46, 0x82, 0x62, 0xe8, 0xa3, 0xd6, 0x36, 0xba,
     0xab, 0xf8, 0x6a, 0x09, 0x46, 0xd1, 0xcf, 0x76, 0x06, 0x33},
    {0xf6, 0x9a, 0x4e, 0x1f, 0xb2, 0xb2, 0x65, 0xcb, 0x29, 0x95, 0xeb,
     0x53, 0x31, 0xfd, 0xf1, 0x6c, 0xfe, 0xe5, 0xf4, 0xc9, 0x34, 0xea,
     0xa3, 0x57, 0x30, 0xbc, 0xd2, 0x7c, 0xd9, 0x0a, 0xc0, 0xaf}};

/* Expected HMACs for SHA3-384 */
static const uint8_t sha3_384_hmacs[][HMAC_SHA3_384_MAX_OUT_LEN] = {
    {0xa7, 0x4f, 0x5c, 0xe5, 0xb1, 0xe4, 0xec, 0xf9, 0xba, 0x02, 0x55, 0xa8,
     0xed, 0xcf, 0xe9, 0xa6, 0x6f, 0x43, 0xc7, 0x98, 0x81, 0x40, 0x35, 0x44,
     0x21, 0x4a, 0x0c, 0x28, 0xd4, 0xab, 0x2b, 0x03, 0xcf, 0x47, 0x9d, 0xea,
     0x63, 0xaa, 0x63, 0xe4, 0xf2, 0x92, 0x28, 0x7c, 0x73, 0x0d, 0xe6, 0xca},
    {0x29, 0x87, 0xb7, 0xf5, 0x24, 0xb0, 0xa0, 0xc0, 0x5e, 0x39, 0xfa, 0x19,
     0x49, 0xf4, 0xf3, 0xed, 0x6d, 0xcf, 0x3d, 0xa7, 0x29, 0x3f, 0x63, 0x83,
     0xc2, 0xc5, 0x71, 0x08, 0x4a, 0x0f, 0xd5, 0x65, 0x57, 0x85, 0x59, 0x51,
     0x6e, 0x37, 0x1c, 0x49, 0xf9, 0x35, 0xfa, 0x46, 0x57, 0xc9, 0xe4, 0xc9},
    {0xe9, 0xfd, 0xc7, 0xb2, 0xf0, 0x3,  0x2f, 0x83, 0x86, 0xa9, 0x2a, 0x5b,
     0xf3, 0xbd, 0x0b, 0x21, 0x34, 0xca, 0xf5, 0x06, 0x17, 0xd4, 0xc1, 0x27,
     0x03, 0xea, 0xfa, 0x6a, 0xe4, 0xf9, 0x1e, 0x5e, 0x62, 0x61, 0x28, 0xa1,
     0xc5, 0xa4, 0xe1, 0xd3, 0xd7, 0x2b, 0xf4, 0xd,  0x1d, 0x3c, 0x54, 0x65}};

/* Expected HMACs for SHA3-512 */
static const uint8_t sha3_512_hmacs[][HMAC_SHA3_512_MAX_OUT_LEN] = {
    {0xcf, 0x63, 0x23, 0xe7, 0x07, 0x8a, 0x2a, 0xcc, 0x65, 0x4a, 0x79,
     0x29, 0xdf, 0xb1, 0xd6, 0xb3, 0xbb, 0x81, 0xad, 0x82, 0x0c, 0xa5,
     0x30, 0x2a, 0x14, 0x26, 0x21, 0xd6, 0xf1, 0x6a, 0xd3, 0xf1, 0xee,
     0x09, 0x3d, 0xff, 0x41, 0x82, 0x0c, 0x2a, 0xa8, 0x59, 0xd7, 0x5a,
     0x9d, 0x67, 0xa3, 0x5f, 0x88, 0x5b, 0x50, 0x4a, 0x72, 0x80, 0xb2,
     0x8e, 0xd5, 0x0a, 0xd5, 0x86, 0xb2, 0xf5, 0x84, 0x60},
    {0x01, 0x71, 0x53, 0x07, 0xd7, 0xa3, 0x69, 0x46, 0x9e, 0xe2, 0x94,
     0x7a, 0xec, 0x18, 0xdf, 0x99, 0x20, 0x1c, 0xea, 0xbb, 0x7b, 0xa3,
     0x8b, 0x4a, 0xc3, 0xbd, 0xee, 0x45, 0xd1, 0x76, 0xbb, 0x63, 0xc8,
     0xb8, 0xc9, 0xc6, 0x1a, 0x50, 0x95, 0xe0, 0x2f, 0xa1, 0xd4, 0x83,
     0xd7, 0x1f, 0x99, 0x05, 0x99, 0x83, 0xfb, 0xd5, 0x3c, 0x84, 0x8e,
     0x43, 0x48, 0x8c, 0x4d, 0x51, 0xdf, 0x4e, 0xca, 0xb6},
    {0x95, 0x41, 0x61, 0xf9, 0x83, 0x50, 0x0e, 0xf4, 0x0e, 0xe7, 0x06,
     0x61, 0x4c, 0x65, 0x1a, 0x72, 0xc0, 0xe8, 0x4b, 0x91, 0x96, 0xad,
     0xe2, 0x65, 0x88, 0x8c, 0x32, 0x8a, 0x0c, 0xe0, 0x25, 0x0d, 0xeb,
     0xe0, 0x7e, 0x30, 0x24, 0x23, 0x9a, 0xce, 0xc9, 0xcd, 0xa0, 0x66,
     0x78, 0x27, 0xc0, 0xc9, 0x29, 0x48, 0xbc, 0x7e, 0x08, 0xd1, 0x74,
     0x92, 0x84, 0x19, 0xa9, 0xd7, 0xf6, 0x48, 0x85, 0x5f}};
